name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ test ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ test ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOTNET_VERSION: '6.0.401' # The .NET SDK version to use for testing

jobs:
  test:
    name: build-and-test-linux
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Test
      run: dotnet test --no-restore --verbosity normal --collect:"XPlat Code Coverage"

    - name: Copy services coverage file
      run: cp ./ServicesTests/TestResults/*/coverage.cobertura.xml ./servicesCoverage.xml
    - name: Copy entities coverage file
      run: cp ./EntitiesTests/TestResults/*/coverage.cobertura.xml ./entitiesCoverage.xml
    - name: Copy business logic coverage file
      run: cp ./BusinessLogicTests/TestResults/*/coverage.cobertura.xml ./businesslogicCoverage.xml
    - name: Get services badge
      run: |
        mkdir badges
        total=$(cat servicesCoverage.xml | grep -oP 'package name="Services" line-rate="\K[^"]+')
        if (( $(echo "$total <= 50" | bc -l) )) ; then
          COLOR=red
        elif (( $(echo "$total > 85" | bc -l) )); then
          COLOR=green
        else
          COLOR=orange
        fi
        curl "https://img.shields.io/badge/Services%20Test%20Coverage-$total%25-$COLOR" > ./badges/nhlDataGetterServicesBadge.svg
    - name: Get entities badge
      run: |
        total=$(cat entitiesCoverage.xml | grep -oP 'package name="Entities" line-rate="\K[^"]+')
        if (( $(echo "$total <= 50" | bc -l) )) ; then
          COLOR=red
        elif (( $(echo "$total > 85" | bc -l) )); then
          COLOR=green
        else
          COLOR=orange
        fi
        curl "https://img.shields.io/badge/Entities%20Test%20Coverage-$total%25-$COLOR" > ./badges/nhlDataGetterEntitiesBadge.svg
    - name: Get business logic badge
      run: |
        total=$(cat businesslogicCoverage.xml | grep -oP 'package name="BusinessLogic" line-rate="\K[^"]+')
        if (( $(echo "$total <= 50" | bc -l) )) ; then
          COLOR=red
        elif (( $(echo "$total > 85" | bc -l) )); then
          COLOR=green
        else
          COLOR=orange
        fi
        curl "https://img.shields.io/badge/Business%20Logic%20Test%20Coverage-$total%25-$COLOR" > ./badges/nhlDataGetterBusinessLogicBadge.svg

    - uses: LanceMcCarthy/Action-AzureBlobUpload@v2
      name: Azure Blob Upload with Destination folder defined
      with:
        connection_string: ${{ secrets.AZURE_BLOB_CONNECTION }}
        container_name: repobadges
        source_folder: ./badges
        delete_if_exists: true

  build_and_publish:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
            prefix=
            suffix=

      - name: Set up QEMU dependency
        uses: docker/setup-qemu-action@v1

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64/v8
